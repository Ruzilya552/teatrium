"use strict";function _defineProperty(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(){function e(){function e(e,t){function n(n){var a=$.makeArray(e.classList),o=n[0].oldValue,s=r||(o?o.split(" "):[]),l=a.filter(i,s),c=s.filter(i,a);t(l,c,a,s),r=a}function i(e){return this.indexOf(e)<0}var r,a=new MutationObserver(n);return a.observe(e,{attributes:!0,attributeOldValue:!0}),a.old=r,a}function t(t,n,i,r){function a(e,t){return t.every(function(t){return e.indexOf(t)>=0})}var o=n.split(" ");return i="function"==typeof i?i:function(){},r="function"==typeof r?r:function(){},new e(t,function(e,t,n,s){o.length>1?!a(s,o)&&a(n,o)?i():a(s,o)&&!a(n,o)&&r():a(e,o)?i():a(t,o)&&r()})}function n(e,t){var n,i,r=!1;return function(){return r?(n=arguments,void(i=this)):(r=!0,void setTimeout(function(){r=!1,e.apply(i,n),n=i=null},t))}}function i(){var e=window.navigator.userAgent,t=e.indexOf("MSIE "),n=e.indexOf("Trident/");return t>0||n>0}function r(){i()?$("html").addClass("no-object-fit"):$("html").addClass("object-fit")}function a(e,t,n){var i="";if(n){var r=new Date;r.setTime(r.getTime()+24*n*60*60*1e3),i="; expires="+r.toUTCString()}document.cookie=e+"="+(t||"")+i+"; path=/"}function o(e){for(var t=e+"=",n=document.cookie.split(";"),i=0;i<n.length;i++){for(var r=n[i];" "==r.charAt(0);)r=r.substring(1,r.length);if(0==r.indexOf(t))return r.substring(t.length,r.length)}return null}var s,l,c,d,p,u=.3,f=["bebe","beeb","ebeb","ebbe"],h=".js-on-visible",v="animated",b=h+"."+v,g=".js-is-visible",m="in-viewport",w="hold-outside-viewport";$(document).ready(function(){function e(e,t){function n(e){var t=e.getBoundingClientRect(),n=[["b",r],["b",a],["e",t.top],["e",t.bottom]].sort(function(e,t){return e[1]-t[1]}).map(function(e){return e[0]}).join("");return f.indexOf(n)>=0}var i=window.innerHeight,r=u*i,a=(1-u)*i;$(b).each(function(){!this.classList.contains(w)&&n(this)&&this.classList.remove(v)}),r=0,a=i,$(g).each(function(){this.classList.toggle(m,!this.classList.contains(w)&&n(this))})}var i=n(e,200),r=$(h+","+g);r.length&&($(window).off("scroll",i),$(".os-viewport").on("scroll",i),e(),r.each(function(){t(this,w,e,e)}))}),$(document).ready(function(){function e(){r.hasClass("open")&&(i.removeClass("no-scroll no-touch windows"),r.removeClass("open"),r.stop().fadeOut(300))}function t(e,t){var n=document,i=n.body,r=n.querySelector(t),a="client"+e;return e="scroll"+e,/CSS/.test(n.compatMode)?r[a]<r[e]:i[a]<i[e]}function n(e){$(this).trigger("popup.open",[n]),e=e||$(this).attr("data-popup");var n=$('[class^="b-popup"][data-popup=\''+e+"']");n.length>0&&(o&&t("Height",".b-page-wrapper")&&i.addClass("windows"),r.removeClass("open"),r.fadeOut(300),i.addClass("no-scroll no-touch"),n.addClass("open"),n.css("display","flex").hide().fadeIn(300))}var i=$(".b-page-wrapper"),r=$(".b-popup, .js-popup-custom"),a=$(".b-popup__content"),o=navigator.userAgent.toLowerCase().indexOf("windows")!==-1;$(".js-open-popup").on("popup.onClose",function(t){e()}),$(document).on("click",".js-open-popup",function(){$(this).trigger("popup.onOpen"),setTimeout(function(){new Swiper(".js-popup-slider",{effect:"fade",slidesPerView:1,loop:!0,navigation:{nextEl:".b-popup-slider .swiper-button-next",prevEl:".b-popup-slider .swiper-button-prev"}})},2e3)}),$(".js-open-popup").on("popup.onOpen",function(){n.call(this)}),window.openPopUp=n,$(document).on("click",".js-close-popup",function(){e(),$(".js-menu-in-popup-back").length&&$(".js-menu-in-popup-back").trigger("click")}),$(document).on("keydown",function(t){27===t.keyCode&&e()}),$(document).mouseup(function(t){r.hasClass("open")&&(a.is(t.target)||0!==a.has(t.target).length||e())})}),r();var y=window.navigator.userAgent;(y.match(/iPad/i)||y.match(/iPhone/i))&&$("html").addClass("ios");var j={dropdownAutoWidth:!0,width:"100%",allowClear:!1},x=function(e){setTimeout(function(){$(".select2-results__option").on("mousedown",function(){var t=$(this).text();e.siblings(".select2-container--open").length&&e.find(":selected").text().trim()==t.trim()&&e.val("").trigger("change")})})};$(".js-select").each(function(){var e=$(this),t=$.extend({placeholder:{id:"-1",text:e.data("placeholder")}},j);e.select2(t).val("").select2(t),e.on("select2:open",function(){x(e)})}),$(".js-select-red").each(function(){var e=$(this),t=$.extend({theme:"red",placeholder:{id:"-1",text:e.data("placeholder")}},j);e.select2(t).val("").select2(t),e.on("select2:open",function(){x(e)})}),$(".js-select-blue").each(function(){var e=$(this),t=$.extend({theme:"blue",placeholder:{id:"-1",text:e.data("placeholder")}},j);e.select2(t).val("").select2(t),e.on("select2:open",function(){x(e)})}),$(".js-select-form").each(function(){var e=$(this),t=$.extend({theme:"form",placeholder:{id:"-1",text:e.data("placeholder")}},j);e.select2(t).val("").select2(t),e.on("select2:open",function(){x(e)}),setTimeout(function(){e.siblings(".select2").after(e.css({opacity:0,height:0}).show())})}),$(".js-burger").on("click",function(){$(this).toggleClass("active"),$(".js-wrap-burger").toggleClass("active"),$(".js-burger").hasClass("active")?$(".b-page-wrapper").addClass("is-locked"):$(".b-page-wrapper").removeClass("is-locked")}),$(".js-search").on("click",function(){$(this).toggleClass("active"),$(".js-search-form").toggleClass("active")}),$(document).on("click",function(e){$(e.target).closest(".b-search").length||($("body").find(".js-search").removeClass("active"),$("body").find(".js-search-form").removeClass("active"))});var k=function(){var e=window.location.hash.split("##").join("#");return $('a[href="'+e+'"]')},P=$(".js-tabs a").index(k());$(".js-tabs").tabs({active:P>-1?P:0,hide:{effect:"fadeOut",duration:500},show:{effect:"fadeIn",duration:500},beforeActivate:function(e){var t=$(e.currentTarget);k();$(".b-page-wrapper").scrollTop(0);var n=t.attr("href").split("#")[1];history.replaceState({},"","#"+n),$(".b-page-wrapper").scrollTop(0)},create:function(){setTimeout(function(){var e=window.location.hash.split("##").join("#");history.replaceState({},"",e)},0),$(".b-page-wrapper").scrollTop(0)}}),$(window).on("hashchange",function(){var e=$("#tabs a").index(k());$(".js-tabs").tabs("option","active",e)}),$(document).ready(function(){var e=o("approve");e||$("body").addClass("cookie"),$(".js-approve-cookie").on("click",function(){$("body").removeClass("cookie"),a("approve","Y",365)}),$(".js-reject-cookie").on("click",function(){$("body").removeClass("cookie")})}),$(document).ready(function(){objectFitImages()}),$(".js-datepicker").datepicker({inline:!0,firstDay:1,autoSize:!0,dateFormat:"d/M/yy",monthNames:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],monthNamesShort:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],onSelect:function(e,t){var n=$(this),i=["Января","Февраля","Марта","Апреля","Мая","Июня","Июля","Августа","Сентября","Октября","Ноября","Декабря"],r=t.currentDay,a=t.currentMonth,o=t.currentYear,s=r+"/"+i[a]+"/"+o,l=n.data("event"),c=n.data("url"),d=$(n.data("filter")).val();n.val(s),l&&$("body").trigger(l,{value:s,url:c,filter:d})},beforeShow:function(e){setTimeout(function(){$("#ui-datepicker-div").css({left:$(e).offset().left+$(e).width()-$("#ui-datepicker-div")[0].clientWidth})},0)}});var _;if($(".js-select-poster").length){var C=$(".js-select-poster"),S=$(".js-poster-mobile"),T=$(".js-poster-desktop");_=function(){window.innerWidth>=320&&window.innerWidth<834?S.append(C):window.innerWidth>=834&&T.append(C)},_(),$(window).resize(function(){$(".js-select-poster").length>0&&_()})}var V=function(){var e,t=new Swiper(".js-slider-poster",(e={speed:500,slidesPerView:2},_defineProperty(e,"slidesPerView","auto"),_defineProperty(e,"navigation",{nextEl:".b-poster .swiper-button-next",prevEl:".b-poster .swiper-button-prev"}),e));window.sliderPosterInstanse=t};if(V(),$("body").on("initSliderPoster",V),$(".js-slider").each(function(e,t){var n,i=$(this);i.addClass("js-slider-"+e),i.parents(".b-slider").find(".swiper-button-prev").addClass("swiper-button-next"+e),i.parents(".b-slider").find(".swiper-button-next").addClass("swiper-button-prev"+e);new Swiper(".js-slider-"+e,(n={slidesPerView:2},_defineProperty(n,"slidesPerView","auto"),_defineProperty(n,"watchOverflow",!0),_defineProperty(n,"navigation",{prevEl:".swiper-button-next"+e,nextEl:".swiper-button-prev"+e}),n))}),$(".js-parallax-right").length){var E=document.querySelector(".b-page-wrapper"),O=document.querySelector(".b-first-block-spreading__picture--left"),M=document.querySelector(".b-first-block-spreading__picture--right-first"),D=document.querySelector(".b-first-block-spreading__picture--right-second"),q=document.querySelector(".b-first-block-spreading__picture--right-third"),A=document.querySelector(".b-first-block-spreading__image-teatr"),I=document.querySelector(".b-first-block-spreading__text"),L=function(e){var t=E.scrollTop;O.style.transform="translate3d(0, -".concat(.275*t,"px, 0)"),M.style.transform="translate3d(0, -".concat(.3*t,"px, 0)"),D.style.transform="translate3d(0, -".concat(.25*t,"px, 0)"),q.style.transform="translate3d(0, -".concat(.2*t,"px, 0)"),A.style.transform="translate3d(0, ".concat(.175*t,"px, 0)"),I.style.transform="translate3d(0, ".concat(.175*t,"px, 0) translateY(-50%)")};E.addEventListener("scroll",L)}if($(document).ready(function(){var e=$(".js-anchor");e.length&&e.on("click",function(e){var t=$(this).data("target"),n=$(t);n.length&&(e.preventDefault(),$(".b-page-wrapper").scrollTo(t,500,{onAfter:function(){history.replaceState({},"",t)}}))})}),$("#map").length&&ymaps.ready(function(){var e=new ymaps.Map("map",{center:[55.719531,37.627022],zoom:13}),t=new ymaps.Placemark(e.getCenter(),{},{preset:"islands#blueTheaterIcon"});e.geoObjects.add(t)}),$(".b-first-block-tdt").length){new Swiper(".js-main-slider",{loop:!0,effect:"fade",pagination:{el:".b-first-block-tdt .swiper-pagination",clickable:!0},navigation:{nextEl:".b-first-block-tdt .swiper-button-next",prevEl:".b-first-block-tdt .swiper-button-prev"}})}new Swiper(".js-reviews-slider",{slidesPerView:1,pagination:{el:".b-reviews-slider .swiper-pagination",clickable:!0},navigation:{nextEl:".b-reviews-slider .swiper-button-next",prevEl:".b-reviews-slider .swiper-button-prev"}});if($(".js-up-button").length){var B=function(){var e=F[0],t=z.length?z[0].offsetHeight:0,n=e.scrollHeight-t-e.clientHeight;F.scrollTop()>300?H.addClass("show"):H.removeClass("show"),e.scrollTop>=n?H.addClass("stop"):H.removeClass("stop")},H=$(".js-up-button"),z=$(".b-footer"),F=$(".b-page-wrapper");H.on("click",function(e){e.preventDefault(),$(".b-page-wrapper").animate({scrollTop:0},"300")}),F.on("scroll",B)}if($(".b-reviews__card").length){var W=$(".js-click-show"),N=$(".js-hide-text");N.css({"max-height":"100%"}),setTimeout(function(){N.each(function(){var e=$(this);e.attr("data-height",e.height())}),N.css({"max-height":""})}),W.on("click",function(e){e.stopPropagation(),e.preventDefault();var t=$(this),n=t.parent(".active").length,i=t.siblings(".js-hide-text"),r=t.parent(".b-reviews__card");n?(r.removeClass("active"),i.animate({height:140})):(r.addClass("active"),i.animate({height:i.attr("data-height")}))})}new Swiper(".js-archive-slider",(s={speed:500,slidesPerView:2},_defineProperty(s,"slidesPerView","auto"),_defineProperty(s,"pagination",{el:".b-archive-slider .swiper-pagination",clickable:!0}),_defineProperty(s,"navigation",{nextEl:".b-archive-slider .swiper-button-next",prevEl:".b-archive-slider .swiper-button-prev"}),s));$(document).ready(function(){$(".js-accordion").accordion({collapsible:!0,active:!1,heightStyle:"content"})}),function(){function e(e){return Boolean(e.data("button-dis"))}function t(t,n){var i=t.find('button[type="submit"]');e(t)&&(i.prop("disabled",n),i.toggleClass("disabled",n))}$.extend($.validator.messages,{required:"Это поле необходимо заполнить.",name:"Укажите имя",phone:"Укажите телефон",remote:"Пожалуйста, введите правильное значение.",email:"Укажите электронный адрес",url:"Пожалуйста, введите корректный URL.",date:"Пожалуйста, введите корректную дату.",dateISO:"Пожалуйста, введите корректную дату в формате ISO.",number:"Пожалуйста, введите число.",digits:"Пожалуйста, вводите только цифры.",creditcard:"Пожалуйста, введите правильный номер кредитной карты.",equalTo:"Пожалуйста, введите такое же значение ещё раз.",extension:"Пожалуйста, выберите файл с правильным расширением.",maxlength:$.validator.format("Пожалуйста, введите не больше {0} символов."),minlength:$.validator.format("Пожалуйста, введите не меньше {0} символов."),rangelength:$.validator.format("Пожалуйста, введите значение длиной от {0} до {1} символов."),range:$.validator.format("Пожалуйста, введите число от {0} до {1}."),max:$.validator.format("Пожалуйста, введите число, меньшее или равное {0}."),min:$.validator.format("Пожалуйста, введите число, большее или равное {0}."),age:"К сожалению, Вы не можете войти, так как не достигли минимального возраста для легальной покупки и употребления алкоголя",defage:"Неверный формат данных",city:"Укажите город",textarea:"Введите сообщение"}),$.validator.addMethod("text-name",function(e,t){return Boolean(e)},$.validator.messages.name),$.validator.addMethod("text-city",function(e,t){return Boolean(e)},$.validator.messages.city),$.validator.addMethod("textarea",function(e,t){return Boolean(e.length)},$.validator.messages.textarea),$.validator.addMethod("tel",function(e,t){var n=/^(\+7|7|8)?[\s\-]?\(?[0-9][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$/;return n.test(e)},$.validator.messages.phone),$.validator.addMethod("email",function(e,t){var n=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return n.test(e)},$.validator.messages.email),$.validator.addMethod("date",function(e,t){var n=Date.parse("1900-01-01"),i=Date.parse("2100-01-01"),r=Date.parse(e);return!(r<n||r>i)&&!/Invalid|NaN/.test(new Date(n))},$.validator.messages.age),$.validator.addMethod("js-select-form",function(e,t){return Boolean(e)},"Не выбрано."),jQuery.validator.addClassRules({"js-name":{"text-name":!0},"js-tel":{tel:!0},"js-email":{email:!0}}),$(".js-form-validate").each(function(){var n,i=$(this);n=$(this).validate({ignore:".ignore, :hidden",submitHandler:function(e){var r=void 0===i.data("valid-clear")||"true"===i.data("valid-clear"),a=void 0===i.data("data-button-blocked")||"true"===i.data("data-button-blocked");return a&&(i.find('button[type="submit"]').addClass("disabled"),i.find('button[type="submit"]').prop("disabled",!0)),$(e).trigger("ajax.send"),r&&setTimeout(function(){$(".js-filename").trigger("file.clear"),$(".js-select-form").trigger("select2.clear"),e.reset(),n.resetForm()},100),t(i,!0),!1}}),e(i)&&(t(i,!0),$(this).on("blur keyup change","input, select",function(e){var r=!n.checkForm();t(i,r)}))})}();new Swiper(".js-actors-slider",(l={speed:500,slidesPerView:2},_defineProperty(l,"slidesPerView","auto"),_defineProperty(l,"navigation",{nextEl:".b-actors .swiper-button-next",prevEl:".b-actors .swiper-button-prev"}),l)),new Swiper(".js-press-slider",(c={slidesPerView:2},_defineProperty(c,"slidesPerView","auto"),_defineProperty(c,"pagination",{el:".b-press-slider .swiper-pagination",clickable:!0}),_defineProperty(c,"breakpoints",{834:_defineProperty({slidesPerView:1},"slidesPerView","auto")}),c)),new Swiper(".js-slider-review",(d={speed:500,slidesPerView:2},_defineProperty(d,"slidesPerView","auto"),_defineProperty(d,"navigation",{nextEl:".b-detail-info__wrapper .swiper-button-next",prevEl:".b-detail-info__wrapper .swiper-button-prev"}),_defineProperty(d,"pagination",{el:".b-detail-info__wrapper .swiper-pagination",clickable:!0}),d)),new Swiper(".js-slider-media",{speed:500,slidesPerView:1,pagination:{el:".b-slider-media .swiper-pagination",clickable:!0},navigation:{nextEl:".b-slider-media .swiper-button-next",prevEl:".b-slider-media .swiper-button-prev"}}),new Swiper(".js-slider-play",(p={slidesPerView:2},_defineProperty(p,"slidesPerView","auto"),_defineProperty(p,"spaceBetween",13),_defineProperty(p,"pagination",{el:".b-slider-play .swiper-pagination",clickable:!0}),_defineProperty(p,"breakpoints",{834:{spaceBetween:15},1200:{spaceBetween:24}}),p));$(document).ready(function(){$(".js-form").on("ajax.send",function(e){var t=$(this),n=t.data("popup"),i=t.attr("action")||location.href,r=t.attr("method"),a=(t.data("event"),new FormData(t[0]));$.ajax({url:i,method:r,processData:!1,contentType:!1,data:a,success:function(){openPopUp(n),t[0].reset()},error:function(){}})}),$("body").on("mainCalendar",function(e,t){var n=t.url,i=t.value,r=t.filter;$.ajax({url:n,data:{value:i,filter:r},success:function a(e){var a=e.success,t=e.html;a&&(sliderPosterInstanse.destroy(!0,!0),$(".js-slider-poster").html(t),$("body").trigger("initSliderPoster"))}})})}),$(document).ready(function(){$(document).on("click",".js-pagination",function(){var e=$(this),t=$(e.data("target")),n=e.data("url");$.ajax({url:n,success:function(e){e.success&&(e.html&&t.html(e.html),e.pagination&&$(".js-ajax-pagination").html(e.pagination))}})})});new Swiper(".js-memory-slider",{speed:500,slidesPerView:2,pagination:{el:".b-memory .swiper-pagination",clickable:!0},breakpoints:{834:{slidesPerView:4},1200:{slidesPerView:6}}});$(".js-grid").length&&$(".js-grid").masonry({itemSelector:".js-grid-item"})}document.addEventListener("DOMContentLoaded",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
